/*
  ECE375 Max Test Code
*/

#include  <hidef.h>      /* common defines and macros */
#include    <stdio.h>
#include    <mc9s12dg256.h>
#pragma LINK_INFO DERIVATIVE "mc9s12dg256b"


#define HiCnt 3       //high pulse duration in TCNT counts
#define LoCnt 500      // low signal between pulses time in TCNT Counts
#define CompareCheck 180 
int diff = 0; 
     
char  HiorLo;
#pragma CODE_SEG __NEAR_SEG NON_BANKED




void interrupt 9 handler1() {
 HILOtimes1();
}

  


int HI_time1; // High time (pulse width)
double time;
double dist;
double a = 0.0000015;
unsigned int countL=255; //set count value to 1
unsigned int countR=255; //set count value to 1
int New_SpeedL =0;
int New_SpeedR =0;
int NEW = 0;
int x = 0;
int y = 0;
int Ping = 0;

unsigned int motorL = 5300;
unsigned int motorR = 5300;


void GoStraight(int);
int PingSensor(int);
void TurnLeft(int);
void TurnRight(int);
void Stop (int);
void END (int);




void main() {


 
  servo54_init();
  servo76_init();
  lcd_init(); // start the LCD
  


  while(1){
   
  
  
  servo76_init();
  lcd_init(); // start the LCD
  
  while(1){
   
  
    
    //PingSensor(1);
    
   // set_lcd_addr(0x00);
   // write_int_lcd((int)dist);
    
    
    
      
    //  if(dist <28){
       
      
         
    //Stop(1000);
    //TurnLeft(1200); 
    GoStraight(100);    //encoder counts may be affected by the turn counts, need to address
   // Stop(1000);
    //TurnRight(1000);
   // GoStraight(100);    //encoder counts may be affected by the turn counts, need to address
     END(1);            //terminate program
                      

    //PingSensor(1);
    
   // set_lcd_addr(0x00);
   // write_int_lcd((int)dist);
    
    
    
      
    //  if(dist <28){
       
      
         
    //Stop(1000);
    //TurnLeft(1200); 
    GoStraight(100);    //encoder counts may be affected by the turn counts, need to address
   // Stop(1000);
    //TurnRight(1000);
   // GoStraight(100);    //encoder counts may be affected by the turn counts, need to address
     END(1);            //terminate program
                      
     
   //    } else{
       
   //     GoStraight(10);
  //     }
       
       
       
  }


  
         asm("swi");      
}













void GoStraight(NEW){

      DDRT =  0xF3; //init PT2 & PT3 as input
      ICPAR = 0xFC; //enable PT2 & PT3 as pulse accum
      TCTL4 = 0x55; //set to capture rising edge                   ////potentially a problem 
      countR=~countR + 1; //2's comp of count value
      countL=~countL + 1; //2's comp of count value
     
      PACN3=countL; //load count into Pulse Acc reg
      PACN2=countR; //load count into Pulse Acc reg

 
for(x=0;x<NEW;x++){

       if(PACN3 > CompareCheck || PACN2 > CompareCheck){
        PACN3 = PACN3-80;
        PACN2 = PACN2-80;
       }
       
             set_lcd_addr(0x00);
             write_int_lcd(PACN3);
             set_lcd_addr(0x40);
             write_int_lcd(PACN2);
       
       
       diff = (PACN3 - PACN2);    //left - right
      
             
       if(diff < 0){
          New_SpeedL = (diff*(motorL -4500)/90);    //increase speed
          New_SpeedR = motorR;
          
           set_servo54(New_SpeedL);
           set_servo76(New_SpeedR);
         
           
        }else if(diff > 0){
          New_SpeedR = (diff*(motorR -4500)/90);    //increase speed
          New_SpeedL = motorL; 
          
           set_servo54(New_SpeedL);
           set_servo76(New_SpeedR);
        
           
        }else {
          
           New_SpeedL = motorL;
           New_SpeedR = motorR;
           
           set_servo54(New_SpeedL);
           set_servo76(New_SpeedR);
          
        
        }         
}
}



int PingSensor (Ping) { 

  
  
    
    while(Ping){
      
      
    TSCR1 = 0x90;         // enable TCNT count & Fast Flag Clearing
    TSCR2 = 0x04;         // choose TCNT rate at 24MHz/16 = 1.5MHz                 //this will effect the parameters above
    TIOS |= 0x02;         // enable OC1 function
    TCTL2 = 0x0C;         // choose OC1 action to pull high
    TFLG1 = 0xFF;         // clear all OC flags
    TC1 = TCNT+10;        // wait 10 TCNT counts for pin pull high
    while(TFLG1 & 0x02)   // wait for match to occur
    TC1 = TC1 + 0;        // this will clear the OC1 Flag
    TCTL2 = 0x04;         // set OC1 pin for toggle
    TC1 += HiCnt;         // Make the high last as needed
    HiorLo = 0;           // Clear the high-low flag to begin
    TIE = 0x02;           // Authorize OC1 interrupts
    asm("cli");
         
    HILO1_init(); 


    HI_time1 = get_HI_time1();
    
    time = ( (double) HI_time1) * a;

    dist = ( ( 331.5 + ( 0.6 * 21 ) ) * time ) * 17;
    
    
    //ms_delay(Ping);
    
    if(dist !=0){
      return dist;
    
    }
    
    }
}




void TurnLeft(NEW){
  set_servo54(5200);
  set_servo76(3950);
  ms_delay(NEW);
}

void TurnRight(NEW){
  set_servo54(3400);
  set_servo76(5700);
  ms_delay(NEW);
}


void Stop (NEW){
  set_servo54(4500);
  set_servo76(4500);
  ms_delay(NEW);
}

void END (NEW){
while(NEW){
  
  set_servo54(4500);
  set_servo76(4500);
}
}
